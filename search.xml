<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[博客导读公告(置顶)]]></title>
      <url>/2029/01/20/%E5%8D%9A%E5%AE%A2%E5%AF%BC%E8%AF%BB%E5%85%AC%E5%91%8A/</url>
      <content type="html"><![CDATA[<p><img src="/2029/01/20/博客导读公告/wechat.png" alt=""><br><a id="more"></a></p>
<p><strong>首先，我很荣幸您出现在我的个人博客，下面请允许我花费您3分钟左右的时间，简单的为您介绍一下博客中的相关功能，这将极大的提高您在后续阅读中的体验：</strong></p>
<p>打个广告，欢迎各位老爷关注我的微信公众号：ml_trip，期待与大家交流！</p>
<h2 id="我的个人介绍"><a href="#我的个人介绍" class="headerlink" title="我的个人介绍"></a>我的个人介绍</h2><p>大家可以在首页的标题下面找到me这个图标，点击即可，里面有我的个人介绍：<br><img src="/2029/01/20/博客导读公告/个人介绍.png" alt=""></p>
<p>我的个人简历下载地址在me跳转页面中的位置如下：<br><img src="/2029/01/20/博客导读公告/cv.png" alt=""></p>
<hr>
<h2 id="快速阅读"><a href="#快速阅读" class="headerlink" title="快速阅读"></a>快速阅读</h2><p>您可在任何一篇文章的右侧看到红色方框：</p>
<ul>
<li>如果您对其中部分内容感兴趣，可直接点击绿色方框内的文章，会自动跳转到您关心的模块；</li>
<li>如果您想要看到我的<strong>更多联系方式</strong>，可以点击蓝色模块中的站点概览；</li>
<li>如果您不想红色方框影响您的阅读，在黑色条块的最下方的小叉点击即可。<br><img src="/2029/01/20/博客导读公告/read.png" alt=""></li>
</ul>
<hr>
<h2 id="赞助激励"><a href="#赞助激励" class="headerlink" title="赞助激励"></a>赞助激励</h2><p>如果您觉得我写的东西对您有一些帮助，在您宽裕的情况下可以在文章下面的打赏中给我发一个小红包，或者直接扫描下面的二维码，感谢您对我的认可：<br><img src="/2029/01/20/博客导读公告/pay.png" alt=""></p>
<p><strong>如果您还是一个学生或者您正处于人生的低谷，感谢您对我的认可，打赏就不需要了，我会一如既往的给大家整理工作中的一些想法和心得</strong></p>
<hr>
<h2 id="自定义搜索"><a href="#自定义搜索" class="headerlink" title="自定义搜索"></a>自定义搜索</h2><p>为了方便大家找到自己关心的内容，建议直接点击搜索图标：<br><img src="/2029/01/20/博客导读公告/search.png" alt=""></p>
<p>比如搜索svm，有模糊匹配结果如下：<br><img src="/2029/01/20/博客导读公告/content.png" alt=""></p>
<hr>
<h2 id="标签检索"><a href="#标签检索" class="headerlink" title="标签检索"></a>标签检索</h2><p>大家可以在首页的标题下面找到标签这个图标，点击即可：<br><img src="/2029/01/20/博客导读公告/tag.png" alt=""></p>
<p>该类别下生成了标签云，为较为仔细的文章内容概括：<br><img src="/2029/01/20/博客导读公告/cloud.png" alt=""></p>
<hr>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><ul>
<li>因为本博客部署在GitHub，如果您有时候遇到打不开网页的问题，建议您重复刷新或者收藏<a href="https://www.jianshu.com/u/79b57248a6c3" target="_blank" rel="noopener">slade_sal简书地址</a>，两者内容是一致的</li>
<li>如果您有任何疑惑或者疑问都可以通过站点概览的邮箱联系我，非常愿意解答您的问题</li>
<li>如果您遇到算法学习过程的困难，需要内推或者就业方向建议，也可以通过站点概览的邮箱联系我，非常愿意和您进行交流</li>
<li>绝大多数代码都可以在我的Github上找到，所有的数据都经过脱敏处理，您可以放心使用，希望对您有所帮助</li>
</ul>
<p>最后，感谢大家一路以来对我的认可。</p>
]]></content>
      
        <categories>
            
            <category> 基础 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 公告 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[PKUseg在货运领域的评测]]></title>
      <url>/2019/01/14/PKUseg%E5%9C%A8%E8%B4%A7%E8%BF%90%E9%A2%86%E5%9F%9F%E7%9A%84%E8%AF%84%E6%B5%8B/</url>
      <content type="html"><![CDATA[<p>先说结论，再和大家闲聊，对比jieba与PKUseg在公路货运切词能力上：</p>
<ul>
<li>默认模型下，jieba效果优于PKUseg</li>
<li>PKUseg提供场景精细化的预训练（还没有提供入口），长远来讲适合专业领域使用</li>
<li>PKUseg在特定的场景下有令人惊喜的效果（地址切分）</li>
</ul>
<p>给大家的建议就是，如果大家赶时间求稳定适应范围需要非常广的时候，目前来说jieba是非常好的选择，如果说在面临一些精细化领域的特殊需求的时候，可以用PKUseg进行一波尝试，有意外惊喜。</p>
<hr>
<p>那是一个风和日丽的早上，突然群里老大发出一条消息：<br><img src="/2019/01/14/PKUseg在货运领域的评测/boss.png" alt=""><br>我感觉我的心脏有一丝隐隐作痛的感觉，人在办公室坐，活从天上来，虽然身后站着一堆催上线的产品，我还是屈服于老大的正义（淫威），简单测评了新出来的PKUseg与Jieba在公路货运/运输行业上的效果对比。</p>
<p>在我们的热词数据库中已经有人工切词完成的2万多条货运的词条：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">description	standard</span><br><span class="line">高博集团装货卸宝华	高博 集团 装货 卸 宝华</span><br><span class="line">北安到吉林农安饲料90吨每吨105	北安 到 吉林 农安 饲料 90吨 每吨 105</span><br><span class="line">需要4个车	需要 4个 车</span><br><span class="line">叶张公路装香闵路曲吴路两卸	叶张公路 装 香闵路 曲吴路 两卸</span><br><span class="line">从福通物流到吴滩镇	从 福通 物流 到 吴滩镇</span><br><span class="line">霞浦宏霞路到中通物流	霞浦宏霞路 到 中通物流</span><br><span class="line">石大路3场到德兴西门山	石大路 3场 到 德兴 西门山</span><br><span class="line">公园西路装	公园 西路 装</span><br><span class="line">不押车每吨150	不 押车 每吨 150</span><br><span class="line">速订价钱好商量	速订 价钱 好商量</span><br><span class="line">慈溪胜山装	慈溪 胜山装</span><br><span class="line">好装好卸高价急走	好装好卸 高价急走</span><br><span class="line">九顶山路与东方大道位置装货可以配货	九顶 山路 与 东方 大道 位置 装货 可以 配货</span><br><span class="line">要二部	要 二部</span><br><span class="line">青浦工业园区久远路提货到奉贤新杨公路进仓	青浦 工业园区 久远路 提货 到 奉贤 新杨公路 进仓</span><br><span class="line">园光路装博学南路卸	园光路 装 博学南路 卸</span><br><span class="line">公兴装卸荣昌广顺	公兴 装卸 荣昌 广顺</span><br><span class="line">打备注电话18458331112	打 备注 电话 18458331112</span><br><span class="line">...</span><br></pre></td></tr></table></figure></p>
<p>首先看，不加任何词库，预训练下的，最后的效果对比：<br><img src="/2019/01/14/PKUseg在货运领域的评测/1.png" alt=""><br>可以看到，<strong>在默认的分词模型下，jieBa分词还是拥有绝对优势的</strong>，但是在pkuSeg的git里面<img src="/2019/01/14/PKUseg在货运领域的评测/2.png" alt=""></p>
<p>所以我想看看能不能进行一下预训练下后再对比一下，可惜的是我在git（<a href="https://github.com/sladesha/pkuseg-python#相关论文" target="_blank" rel="noopener">git地址传送门</a>）上找了半天也没有找到预训练的入口，只有已经被官方预训练好的词库<br><img src="/2019/01/14/PKUseg在货运领域的评测/3.png" alt=""><br>等有时间了，可以邮件沟通一下再补充这个部分的效果对比，我觉得，应该还是有提升的。</p>
<p>但是，在我们实际去测的过程中，我们发现了一些差异话的东西比较有意思。我们其实现在在做一个语音发货的产品，涉及到把一串地址切分开的需求：<br><img src="/2019/01/14/PKUseg在货运领域的评测/4.png" alt=""></p>
<p>其中涉及到<strong>地址切分</strong>的时候，jieba的能力会比如PKUseg要弱不少，比如“山西大同”，“上海浦东”，我们需要把一级二级地址切开的时候，PKUseg可以做到，而jieba并不能按照需求切块。所以，我们已经打算在地址模块切换PKUseg的模型来适应了。<br><img src="/2019/01/14/PKUseg在货运领域的评测/5.png" alt=""></p>
<p>最后吐槽一下，虽然我知道PKUseg需要加载模型，但是一加载就是一二十秒也是有点夸张了。酒浆，各位下回见。</p>
<p>欢迎大家关注我的个人<a href="http://shataowei.com" target="_blank" rel="noopener">bolg</a>，<a href="https://www.zhihu.com/people/sladesha/activities" target="_blank" rel="noopener">知乎</a>，更多代码内容欢迎follow我的个人<a href="https://github.com/sladesha" target="_blank" rel="noopener">Github</a>，如果有任何算法、代码、转行疑问都欢迎通过公众号发消息给我。</p>
]]></content>
      
        <categories>
            
            <category> 开源项目 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> NLP </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[GloVe向量化做文本分类]]></title>
      <url>/2018/09/25/GloVe%E5%90%91%E9%87%8F%E5%8C%96%E5%81%9A%E6%96%87%E6%9C%AC%E5%88%86%E7%B1%BB/</url>
      <content type="html"><![CDATA[<h1 id="向量化"><a href="#向量化" class="headerlink" title="向量化"></a>向量化</h1><p>在之前，我对向量化的方法一直局限在两个点，</p>
<p>第一种是常规方法的one-hot-encoding的方法，常见的比如tf-idf生成的0-1的稀疏矩阵来代表原文本：<br><img src="/2018/09/25/GloVe向量化做文本分类/1.png" alt=""></p>
<p>这种方法简单暴力，直接根据文本中的单词进行one-hot-encoding，但是数据量一但大了，这个单句话的one-hot-encoding结果会异常的长，而且没办法得到词与词之间的关系。</p>
<p>第二种是基于神经网络的方法，常见的比如word2vec，YouTubeNet：<br><img src="/2018/09/25/GloVe向量化做文本分类/2.png" alt=""></p>
<p>这种方法（这边以CBOW为例子）都是初始一个固定长度的随机向量作为每个单词的向量，制定一个目标词的向量，以上下文词向量的sum结果作为input进行前向传递，使得传递的结果和目标词向量尽可能一致，以修正初始的随机向量。<br>换句话说，就是刚开始，我随意定义生成一个vector代表一个词，然后通过上下文的联系去修正这个随机的vector。好处就是我们可以得到词与词之间的联系，而且单个词的表示不复杂，坏处就是需要大量的训练样本，毕竟涉及到了神经网络。</p>
<p>最近，我们突然发现了第三种方法，GloVe向量化。它也是开始的时候随机一个vector作为单词的表示，但是它不利用神经网络去修正，而是利用了一个自己构造的损失函数：<br><img src="/2018/09/25/GloVe向量化做文本分类/3.png" alt=""></p>
<p>通过我们已有的文章内容，去是的这个损失函数最小，这就变成了一个机器学习的方法了，相比较暴力的前馈传递，这也高快速和高效的多。同时，它还兼具了word2vec最后结果里面vector方法的优点，得到词与词之间的联系，而且单个词的表示不复杂。</p>
<p>这边就不展开GloVe算法的细节了，后面有空和大家补充，这个算法的构造非常巧妙，值得大家借鉴一下。</p>
<h1 id="文本分类"><a href="#文本分类" class="headerlink" title="文本分类"></a>文本分类</h1><p>刚才开门见山的聊了蛮久向量化，看起来和文本分类没什么关系，确实在通常意义上来讲，我们的最简单最常用的方法并不是向量化的方法，比如通过朴素贝叶斯，N-Grams这些方法来做分类识别。</p>
<h2 id="tfidf-N-grams"><a href="#tfidf-N-grams" class="headerlink" title="tfidf+N-grams"></a>tfidf+N-grams</h2><p>1.其实很简单，首先对语料库进行切词，维护自己的词典，做高频词的人工复审，将无意词进行stop_words归总<br><img src="/2018/09/25/GloVe向量化做文本分类/4.png" alt="对公司内部信息进行了一下处理，主要看分布趋势"></p>
<p>可以看到，高频词其实是非常非常少的，而且如果你真的去做了，你就会发现，”了”、“的”、“啊”这种语气词，和一些你公司相关的领域词汇会非常靠前，这些词作为stop_words会有效的降低训练成本、提高模型效果。</p>
<p>2.进行tf-idf，将词进行重赋权，字词的重要性随着它在文件中出现的次数成正比增加，但同时会随着它在语料库中出现的频率成反比下降，有效的将向量化中的one hot encoding结果进行了修正。但是依然存在问题：在TFIDF算法中并没有体现出单词的位置信息。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># sublinear_tf：replace tf with 1 + log(tf)</span></span><br><span class="line"><span class="comment"># max_df：用来剔出高于词频0.5的词</span></span><br><span class="line"><span class="comment"># token_pattern：(?u)\b\w+\b是为了匹配出长度为1及以上的词，默认的至少需要词长度为2</span></span><br><span class="line"><span class="comment"># ngram_range：这边我做了3-grams处理，如果只想朴素计算的话(1,1)即可</span></span><br><span class="line"><span class="comment"># max_features：随着我做了各种宽松的条件，最后生成的词维度会异常大，这边限制了前3万</span></span><br><span class="line">vectorizer = TfidfVectorizer(stop_words=stpwrdlst, sublinear_tf=<span class="keyword">True</span>, max_df=<span class="number">0.5</span>, token_pattern=<span class="string">r"(?u)\b\w+\b"</span>,ngram_range=(<span class="number">1</span>, <span class="number">3</span>), max_features=<span class="number">30000</span>)</span><br></pre></td></tr></table></figure>
<p>不得不说，python处理机器学习，深度学习的便捷程度是异常的高。</p>
<p>3.在经过TfidfVectorizer处理之后的结果是以稀疏矩阵的形式来存的，如果想看内容的话，可以用todense()转化为matrix来看。接下来，用贝叶斯来训练刚才得到的矩阵结果就可以了。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mnb_tri = MultinomialNB(alpha=<span class="number">0.001</span>)</span><br><span class="line">mnb_tri.fit(tri_train_set.tdm, tri_train_set.label)</span><br></pre></td></tr></table></figure>
<h2 id="tf-idf-n-grams-naive-bayes-lr"><a href="#tf-idf-n-grams-naive-bayes-lr" class="headerlink" title="tf-idf + n-grams + naive-bayes + lr"></a>tf-idf + n-grams + naive-bayes + lr</h2><p>这种方法是上面方法的升级版本，我们先看下架构：<br><img src="/2018/09/25/GloVe向量化做文本分类/5.png" alt="对公司内部信息进行了一下处理，主要看算法架构"></p>
<p>其实主要差异在于右侧的算法模型详细部分，我们做了一个由3-grams到3-grams+naive-bayes+lr的扩充，提升精度。</p>
<p>在模型的过程中，上面的第一步，都是一样的，在第二、三步有所差异：<br>2.在第二步中，我们除了要构造出一个3-grams的sparse matrix也需要构造出一个朴素的sparse matrix</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 朴素结果</span></span><br><span class="line">vectorizerby = TfidfVectorizer(stop_words=stpwrdlst, token_pattern=<span class="string">r"(?u)\b\w+\b"</span>, max_df=<span class="number">0.5</span>, sublinear_tf=<span class="keyword">True</span>,ngram_range=(<span class="number">1</span>, <span class="number">1</span>), max_features=<span class="number">100000</span>)</span><br></pre></td></tr></table></figure>
<p>3.不仅仅用bayes进行一次分类，而是根据3-grams和朴素情况下的sparse matrix进行预测，再用logistics regression来合并两个的结果做个stack进行0-1压缩。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 构造出一个3-grams的sparse matrix也需要构造出一个朴素的sparse matrix</span></span><br><span class="line">mnb_tri = MultinomialNB(alpha=<span class="number">0.001</span>)</span><br><span class="line">mnb_tri.fit(tri_train_set.tdm, tri_train_set.label)</span><br><span class="line">mnb_by = MultinomialNB(alpha=<span class="number">0.001</span>)</span><br><span class="line">mnb_by.fit(by_train_set.tdm, by_train_set.label)</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 加bias，cv选择最优正则结果，lbfgs配合l2正则</span></span><br><span class="line">lr = LogisticRegressionCV(multi_class=<span class="string">"ovr"</span>, fit_intercept=<span class="keyword">True</span>, Cs=np.logspace(<span class="number">-2</span>, <span class="number">2</span>, <span class="number">20</span>), cv=<span class="number">2</span>, penalty=<span class="string">"l2"</span>,solver=<span class="string">"lbfgs"</span>, tol=<span class="number">0.01</span>)</span><br><span class="line">re = lr.fit(adv_data[[<span class="string">'f1'</span>, <span class="string">'f2'</span>]], adv_data[<span class="string">'rep_label'</span>])</span><br></pre></td></tr></table></figure>
<p>总结一下上面两种方法，我觉得是入门快，效果也不错的小练手，也是完全可以作为我们开始一个项目的时候，用来做baseline的方法，主要是快啊～/斜眼笑</p>
<h2 id="GloVe-lr"><a href="#GloVe-lr" class="headerlink" title="GloVe+lr"></a>GloVe+lr</h2><p>因为我目前的带标签数据比较少，所以之前一直没有敢用word2vec去向量化作死，但是GloVe不存在这个问题啊，我就美滋滋的进行了一波。<br>首先，先讲下GloVe的使用：</p>
<ul>
<li><a href="https://github.com/stanfordnlp/GloVe" target="_blank" rel="noopener">https://github.com/stanfordnlp/GloVe</a> 在最大的代码抄袭网站下载(git clone)坦福大佬的代码，友情提醒，不要作死自己看了理论就觉得自己会写，自己搞个GloVe。(别问我是怎么知道的)</li>
<li>cd到对应目录下，vim demo.sh这个文件<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="built_in">set</span> -e</span><br><span class="line"></span><br><span class="line"><span class="comment"># Makes programs, downloads sample data, trains a GloVe model, and then evaluates it.</span></span><br><span class="line"><span class="comment"># One optional argument can specify the language used for eval script: matlab, octave or [default] python</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 请把make这边注释掉，这个是让你去下个demo，我们直接改成自己的数据</span></span><br><span class="line"><span class="comment"># make</span></span><br><span class="line"><span class="comment"># if [ ! -e text8 ]; then</span></span><br><span class="line"><span class="comment">#   if hash wget 2&gt;/dev/null; then</span></span><br><span class="line"><span class="comment">#     wget http://mattmahoney.net/dc/text8.zip</span></span><br><span class="line"><span class="comment">#   else</span></span><br><span class="line"><span class="comment">#     curl -O http://mattmahoney.net/dc/text8.zip</span></span><br><span class="line"><span class="comment">#   fi</span></span><br><span class="line"><span class="comment">#   unzip text8.zip</span></span><br><span class="line"><span class="comment">#   rm text8.zip</span></span><br><span class="line"><span class="comment"># fi</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># CORPUS需要对应自己的欲训练的文档</span></span><br><span class="line">CORPUS=content.txt</span><br><span class="line">VOCAB_FILE=vocab.txt</span><br><span class="line">COOCCURRENCE_FILE=cooccurrence.bin</span><br><span class="line">COOCCURRENCE_SHUF_FILE=cooccurrence.shuf.bin</span><br><span class="line">BUILDDIR=build</span><br><span class="line">SAVE_FILE=vectors</span><br><span class="line">VERBOSE=2</span><br><span class="line">MEMORY=4.0</span><br><span class="line"><span class="comment"># 单词至少出现几次</span></span><br><span class="line">VOCAB_MIN_COUNT=3</span><br><span class="line"><span class="comment"># 向量长度</span></span><br><span class="line">VECTOR_SIZE=128</span><br><span class="line"><span class="comment"># 迭代次数</span></span><br><span class="line">MAX_ITER=30</span><br><span class="line"><span class="comment"># 窗口长度</span></span><br><span class="line">WINDOW_SIZE=15</span><br><span class="line">BINARY=2</span><br><span class="line">NUM_THREADS=8</span><br><span class="line">X_MAX=10</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"$ <span class="variable">$BUILDDIR</span>/vocab_count -min-count <span class="variable">$VOCAB_MIN_COUNT</span> -verbose <span class="variable">$VERBOSE</span> &lt; <span class="variable">$CORPUS</span> &gt; <span class="variable">$VOCAB_FILE</span>"</span></span><br><span class="line"><span class="variable">$BUILDDIR</span>/vocab_count -min-count <span class="variable">$VOCAB_MIN_COUNT</span> -verbose <span class="variable">$VERBOSE</span> &lt; <span class="variable">$CORPUS</span> &gt; <span class="variable">$VOCAB_FILE</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"$ <span class="variable">$BUILDDIR</span>/cooccur -memory <span class="variable">$MEMORY</span> -vocab-file <span class="variable">$VOCAB_FILE</span> -verbose <span class="variable">$VERBOSE</span> -window-size <span class="variable">$WINDOW_SIZE</span> &lt; <span class="variable">$CORPUS</span> &gt; <span class="variable">$COOCCURRENCE_FILE</span>"</span></span><br><span class="line"><span class="variable">$BUILDDIR</span>/cooccur -memory <span class="variable">$MEMORY</span> -vocab-file <span class="variable">$VOCAB_FILE</span> -verbose <span class="variable">$VERBOSE</span> -window-size <span class="variable">$WINDOW_SIZE</span> &lt; <span class="variable">$CORPUS</span> &gt; <span class="variable">$COOCCURRENCE_FILE</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"$ <span class="variable">$BUILDDIR</span>/shuffle -memory <span class="variable">$MEMORY</span> -verbose <span class="variable">$VERBOSE</span> &lt; <span class="variable">$COOCCURRENCE_FILE</span> &gt; <span class="variable">$COOCCURRENCE_SHUF_FILE</span>"</span></span><br><span class="line"><span class="variable">$BUILDDIR</span>/shuffle -memory <span class="variable">$MEMORY</span> -verbose <span class="variable">$VERBOSE</span> &lt; <span class="variable">$COOCCURRENCE_FILE</span> &gt; <span class="variable">$COOCCURRENCE_SHUF_FILE</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"$ <span class="variable">$BUILDDIR</span>/glove -save-file <span class="variable">$SAVE_FILE</span> -threads <span class="variable">$NUM_THREADS</span> -input-file <span class="variable">$COOCCURRENCE_SHUF_FILE</span> -x-max <span class="variable">$X_MAX</span> -iter <span class="variable">$MAX_ITER</span> -vector-size <span class="variable">$VECTOR_SIZE</span> -binary <span class="variable">$BINARY</span> -vocab-file <span class="variable">$VOCAB_FILE</span> -verbose <span class="variable">$VERBOSE</span>"</span></span><br><span class="line"><span class="variable">$BUILDDIR</span>/glove -save-file <span class="variable">$SAVE_FILE</span> -threads <span class="variable">$NUM_THREADS</span> -input-file <span class="variable">$COOCCURRENCE_SHUF_FILE</span> -x-max <span class="variable">$X_MAX</span> -iter <span class="variable">$MAX_ITER</span> -vector-size <span class="variable">$VECTOR_SIZE</span> -binary <span class="variable">$BINARY</span> -vocab-file <span class="variable">$VOCAB_FILE</span> -verbose <span class="variable">$VERBOSE</span></span><br><span class="line"><span class="keyword">if</span> [ <span class="string">"<span class="variable">$CORPUS</span>"</span> = <span class="string">'text8'</span> ]; <span class="keyword">then</span></span><br><span class="line"><span class="keyword">if</span> [ <span class="string">"<span class="variable">$1</span>"</span> = <span class="string">'matlab'</span> ]; <span class="keyword">then</span></span><br><span class="line">matlab -nodisplay -nodesktop -nojvm -nosplash &lt; ./<span class="built_in">eval</span>/matlab/read_and_evaluate.m 1&gt;&amp;2 </span><br><span class="line"><span class="keyword">elif</span> [ <span class="string">"<span class="variable">$1</span>"</span> = <span class="string">'octave'</span> ]; <span class="keyword">then</span></span><br><span class="line">octave &lt; ./<span class="built_in">eval</span>/octave/read_and_evaluate_octave.m 1&gt;&amp;2</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"$ python eval/python/evaluate.py"</span></span><br><span class="line">python <span class="built_in">eval</span>/python/evaluate.py</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>这边多说一下，<code>CORPUS=content.txt</code>这边content.txt里面的格式需要按照空格为分隔符进行存储，我之前一直以为是<code>\t</code>。</p>
<ul>
<li><p>直接sh demo.sh，你会得到vectors.txt，这个里面就对应每个词的向量表示</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">天气 -0.754142 0.386905 -1.200074 -0.587121 0.758316 0.373824 0.342211 -1.275982 -0.300846 0.374902 -0.548544 0.595310 0.906426 0.029255 0.549932 -0.650563 -0.425185 1.689703 -1.063556 -0.790254 -1.191287 0.841529 1.080641 -0.082830 1.062107 -0.667727 0.573955 -0.604460 -0.601102 0.615299 -0.470923 0.039398 1.110345 1.071094 0.195431 -0.155259 -0.781432 0.457884 1.093532 -0.188207 -0.161646 0.246220 -0.346529 0.525458 0.617904 -0.328059 1.374414 1.020984 -0.959817 0.670894 1.091743 0.941185 0.902730 0.609815 0.752452 1.037880 -1.522382 0.085098 0.152759 -0.562690 -0.405502 0.299390 -1.143145 -0.183861 0.383053 -0.013507 0.421024 0.025664 -0.290757 -1.258696 0.913482 -0.967165 -0.131502 -0.324543 -0.385994 0.711393 1.870067 1.349140 -0.541325 -1.060084 0.078870 0.773146 0.358453 0.610744 0.407547 -0.552853 1.663435 0.120006 0.534927 0.219279 0.682160 -0.631311 1.071941 -0.340337 -0.503272 0.150010 1.347857 -1.024009 -0.181186 0.610240 -0.218312 -1.120266 -0.486539 0.264507 0.266192 0.347005 0.172728 0.613503 -0.131925 -0.727304 -0.504488 1.773406 -0.700505 -0.159963 -0.888025 -1.358476 0.540589 -0.243272 -0.236959 0.391855 -0.133703 -0.071120 1.050547 -1.087613 -0.467604 1.779341 -0.449409 0.949411</span><br><span class="line">好了 1.413075 -0.226177 -2.024229 -0.192003 0.628270 -1.227394 -1.054946 -0.900683 -1.958882 -0.133343 -1.014088 -0.434961 0.026207 -0.066139 0.608682 -0.362021 0.314323 0.261955 -0.571414 1.738899 -1.013223 0.503853 -0.536511 -0.212048 0.611990 -0.627851 0.297657 -0.187690 -0.565871 -0.234922 -0.845875 -0.767733 0.032470 1.508012 -0.204894 -0.495031 -0.159262 0.181380 0.050582 -0.333469 0.454832 -2.091174 0.448453 0.940212 0.882077 -0.617093 0.616782 -0.993445 -0.385087 0.251711 0.259918 -0.222614 -0.595131 0.661472 0.194740 0.619222 -1.253610 -0.838179 0.781428 -0.396697 -0.530109 0.022801 -0.558296 -0.656034 0.842634 -0.105293 0.586823 -0.603681 -0.605727 -0.556468 0.924275 -0.299228 -1.121538 0.237787 0.498935 -0.045423 0.171536 -1.026385 -0.262225 0.390662 1.263240 0.352172 0.261121 0.915840 1.522183 -0.498536 2.046169 0.012683 -0.073264 -0.361662 0.759529 -0.713268 0.281747 -0.811104 -0.002061 -0.802508 0.520559 0.092275 -0.623098 0.199694 -0.134896 -1.390617 0.911266 -0.114067 1.274048 1.108440 -0.266002 1.066987 0.514556 0.144796 -0.606461 0.197114 0.340205 -0.400785 -0.957690 -0.327456 1.529557 -1.182615 0.431229 -0.084865 0.513266 -0.022768 -0.092925 -0.553804 -2.269741 -0.078390 1.376199 -1.163337</span><br><span class="line">随意 0.410436 0.776917 -0.381131 0.969900 -0.804778 -0.785379 -0.887346 -1.463543 -1.574851 0.313285 0.685253 -0.918359 0.199073 -0.305374 -0.642721 0.098114 -0.723331 0.353159 0.042807 0.369208 -1.534930 -0.084871 0.020417 -0.384782 0.276833 -0.160028 1.107051 0.884343 -0.204381 -0.459738 -0.387128 0.125867 0.093569 1.192471 -0.473752 -0.314541 -1.029249 0.481447 1.358753 -1.688778 -0.113080 -0.401443 -0.958206 0.605638 1.083126 0.131617 0.092507 0.476506 0.801755 1.096883 -0.102036 0.461804 0.820297 -0.104053 -0.126638 0.957708 -0.722038 0.223686 0.583582 0.201246 -1.254708 0.770717 -1.271523 -0.584094 -1.142426 1.066567 0.071951 -0.182649 0.014365 -0.577141 0.037340 -0.166832 -0.247827 0.165994 1.143665 -0.258421 -0.335195 0.170218 -0.212838 0.013709 0.088847 0.663238 -0.597439 0.632847 0.370871 0.652707 0.306935 0.195127 -0.252443 0.588479 0.191633 -1.587564 0.564600 -0.306158 -0.648177 -0.488595 1.532795 -0.462473 -0.643878 1.292369 -0.051494 -1.032738 0.453587 0.411327 -0.469373 0.428398 -0.020839 0.307422 0.518331 -0.860913 -2.170098 -0.277532 -0.966210 0.615336 -0.924783 0.042679 1.289640 1.272992 1.367773 0.426600 -0.187254 -0.781009 1.331301 -0.088357 -1.113550 -0.262879 0.300137 0.437905</span><br><span class="line">..</span><br></pre></td></tr></table></figure>
</li>
<li><p>有了每个词的向量，我们这边采取了借鉴YoutubeNet网络的想法：<br><img src="/2018/09/25/GloVe向量化做文本分类/6.png" alt=""></p>
</li>
</ul>
<p>举个例子：存在一句话”我爱中国”，“我”的向量是[0.3,0.2,0.3]，”爱”的向量是[0.1,0.2,0.3]，“中国”的向量是[0.6,0.6,0.4]，那么average后就是[0.33,0.33,0.33]，然后这就类似一个特征为三的input。</p>
<p>这种方法的好处就是快捷，预处理的工作代价要小，随着数据量的增多，模型的效果要更加的好。</p>
<h1 id="效果对比"><a href="#效果对比" class="headerlink" title="效果对比"></a>效果对比</h1><p>最后这边粗略的给出一下业务数据对比：</p>
<table>
<thead>
<tr>
<th>experiment</th>
<th>date</th>
<th>intercepted_recall</th>
</tr>
</thead>
<tbody>
<tr>
<td>3-grams</td>
<td>20180915</td>
<td>79.3%</td>
</tr>
<tr>
<td>3-grams</td>
<td>20180917</td>
<td>78.7%</td>
</tr>
<tr>
<td>3-grams+bayes+lr</td>
<td>20180915</td>
<td>83.4%</td>
</tr>
<tr>
<td>3-grams+bayes+lr</td>
<td>20180917</td>
<td>88.6%</td>
</tr>
<tr>
<td>gloVe+lr</td>
<td>20180915</td>
<td>93.1%</td>
</tr>
<tr>
<td>gloVe+lr</td>
<td>20180917</td>
<td>93.9%</td>
</tr>
</tbody>
</table>
<p>欢迎大家关注我的个人<a href="http://shataowei.com" target="_blank" rel="noopener">bolg</a>，<a href="https://www.zhihu.com/people/sladesha/activities" target="_blank" rel="noopener">知乎</a>，相关代码已经上传到我的<a href="https://github.com/sladesha/machine_learning" target="_blank" rel="noopener">Github</a>，如果有任何算法、代码、转行疑问都欢迎通过公众号发消息给我。</p>
]]></content>
      
        <categories>
            
            <category> 机器学习 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> NLP </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
